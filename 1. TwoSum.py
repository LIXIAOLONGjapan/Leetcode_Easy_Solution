# 给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 target  的那 两个 整数，并返回它们的数组下标。
# 你可以假设每种输入只会对应一个答案。但是，数组中同一个元素在答案里不能重复出现。
# 你可以按任意顺序返回答案。

'''
示例 1

输入 nums = [2,7,11,15], target = 9
输出 [0,1]
解释 因为 nums[0] + nums[1] == 9 ，返回 [0, 1] 。

'''

class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]: #为什么此处List不声明也可以：因为其
        '''
        这行代码定义了一个名为 twoSum 的函数。函数的参数包括：
        self: 是函数的调用者，在本例中是 Solution 类的实例。
        nums: 是一个列表，列表中的元素是整数。
        target: 是一个整数，是两个数之和的目标值。

        Q1:self调用者在此处的意义是什么? 我们什么情况下要为Python 函数添加self?
        A1: 在 Python 中, self 是指向类实例的引用。在类方法中, self 是必需的，因为它是用于访问类实例的属性和方法的。

        在 twoSum() 函数中, self 是 Solution 类的实例。twoSum() 函数是一个类方法，它需要一个 self 参数来访问 Solution 类的属性和方法。

        我们需要为 Python 函数添加 self 在以下情况下：
        1. 函数是类方法。
        2. 函数需要访问类实例的属性或方法。
        
        Q2:什么是类方法？
        A2:在 Python 中，类方法是用来操作类实例的函数。类方法的第一个参数必须是 self, 它指向调用该方法的类实例。
        如果函数需要访问类实例的属性或方法，那么我们也需要为该函数添加 self。

        Q3:我可以这么理解吗: self类似于java中的实例, 是用作初始化类函数, 生成一个类的实例。
        A3:是的，你可以这么理解。在 Python 中, self 类似于 Java 中的 this。它是指向调用该方法的类实例的引用。在类方法中, self 是必需的，因为它是用于访问类实例的属性和方法的。

        在类方法中, self 的作用是初始化类函数，生成一个类的实例。

        Q4:那么“nums: List[int], target: int”的含义是什么?
        A4: “nums: List[int], target: int” 是 twoSum() 函数的参数定义。
        nums 是一个整数列表，列表中的元素是整数。
        target 是一个整数，是两个数之和的目标值。
        
        twoSum() 函数的功能是找到两个数的和等于 target 的两个数，并将这两个数的索引返回。
        因此, nums 参数是 twoSum() 函数需要操作的数组, target 参数是 twoSum() 函数需要找到的两个数之和的目标值。

        以下是 twoSum() 函数的参数定义的详细解释：
        nums 参数的类型是 List[int]，表示 nums 是一个列表，列表中的元素是整数。
        target 参数的类型是 int, 表示 target 是一个整数。

        Q5:List[int]是什么含义？
        A5:List 是 Python 内置的一种数据类型, 用于存储一个有序的元素集合。int 是 Python 内置的一种整数类型。
        因此, List[int] 表示一个由整数组成的列表。

        '''

    # 哈希表：本质是映射，哈希表是一种数据结构，它将键映射到值。键可以是任何类型的对象，值也可以是任何类型的对象。
    # 哈希表的实现通常使用一个数组来存储键和值。键和值使用一个散列函数来映射到数组中的索引。
    # 哈希表的查找效率很高，因为它可以直接通过键来找到值。
    # 我们可以用哈希表 m 存放数组值以及对应的下标。
    
    # 此处的思路是：比如说结果为9，数组为2，7，11，15.
    # 我们实际上是拿9去减2，如果结果7在哈希表中，则说明这就是两数之和。
    # 实质：用哈希表提升查找效率。
    # 遍历数组 nums，当发现 target−nums[i]在哈希表中，说明找到了目标值，返回 target−nums[i]的下标以及 i 即可。


        m = {} #首先，创建一个哈希表 m，用于存储数组 nums 中的元素和它们的索引。
        for i, x in enumerate(nums): # 用enumerate()函数创建元组列表，包含索引和元素。然后，遍历数组 nums，对于每个元素 x：
            y = target - x #计算 target - x，即另一个元素的值。
            if y in m: # 如果 target - x 在哈希表 m 中，那么说明已经找到了两个数，返回这两个数的索引。
                return [m[y], i] #将 x 和它的索引存储到哈希表 m 中。
            m[x] = i #返回它们的数组下标


'''
enumerate() 是 Python 内置的函数，用于返回一个元组列表，其中包含索引和元素。
enumerate() 函数的语法如下：
        enumerate(iterable, start=0)

        参数说明：

    iterable:可迭代对象。
    start:索引的起始值，默认为 0。

    enumerate() 函数的返回值是一个元组列表，其中包含索引和元素。元组的第一个元素是索引，第二个元素是元素。

    例子：
    nums = [2, 7, 11, 15]

    for i, num in enumerate(nums):
    print(i, num)
    
    输出：
    0 2
    1 7
    2 11
    3 15

'''